/*
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 */
package org.codice.imaging.nitf.nifi.processors.nitf;

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.nifi.annotation.behavior.WritesAttribute;
import org.apache.nifi.annotation.behavior.WritesAttributes;
import org.apache.nifi.annotation.documentation.CapabilityDescription;
import org.apache.nifi.annotation.documentation.Tags;
import org.apache.nifi.components.PropertyDescriptor;
import org.apache.nifi.flowfile.FlowFile;
import org.apache.nifi.processor.AbstractProcessor;
import org.apache.nifi.processor.ProcessContext;
import org.apache.nifi.processor.ProcessSession;
import org.apache.nifi.processor.ProcessorInitializationContext;
import org.apache.nifi.processor.Relationship;
import org.apache.nifi.processor.exception.ProcessException;
import org.codice.imaging.nitf.extract.ExtractMetadata;

@Tags({"nitf,codice"})
@CapabilityDescription("Extract metadata information from NITF files.")
@WritesAttributes({
  @WritesAttribute(attribute = "nitf.ACFTB.AC_MSN_ID"),
  @WritesAttribute(attribute = "nitf.ACFTB.AC_TAIL_NO"),
  @WritesAttribute(attribute = "nitf.ACFTB.AC_TO"),
  @WritesAttribute(attribute = "nitf.ACFTB.IMHOSTNO"),
  @WritesAttribute(attribute = "nitf.ACFTB.IMREQID"),
  @WritesAttribute(attribute = "nitf.ACFTB.MPLAN"),
  @WritesAttribute(attribute = "nitf.ACFTB.PDATE"),
  @WritesAttribute(attribute = "nitf.ACFTB.SCENE_SOURCE"),
  @WritesAttribute(attribute = "nitf.ACFTB.SCNUM"),
  @WritesAttribute(attribute = "nitf.AIMIDB.ACQUISITION_DATE"),
  @WritesAttribute(attribute = "nitf.AIMIDB.COUNTRY"),
  @WritesAttribute(attribute = "nitf.AIMIDB.CURRENT_SEGMENT"),
  @WritesAttribute(attribute = "nitf.AIMIDB.END_SEGMENT"),
  @WritesAttribute(attribute = "nitf.AIMIDB.END_TILE_COLUMN"),
  @WritesAttribute(attribute = "nitf.AIMIDB.END_TILE_ROW"),
  @WritesAttribute(attribute = "nitf.AIMIDB.FLIGHT_NO"),
  @WritesAttribute(attribute = "nitf.AIMIDB.LOCATION"),
  @WritesAttribute(attribute = "nitf.AIMIDB.MISSION_IDENTIFICATION"),
  @WritesAttribute(attribute = "nitf.AIMIDB.MISSION_NO"),
  @WritesAttribute(attribute = "nitf.AIMIDB.OP_NUM"),
  @WritesAttribute(attribute = "nitf.AIMIDB.REPLAY"),
  @WritesAttribute(attribute = "nitf.AIMIDB.REPRO_NUM"),
  @WritesAttribute(attribute = "nitf.AIMIDB.START_TILE_COLUMN"),
  @WritesAttribute(attribute = "nitf.AIMIDB.START_TILE_ROW"),
  @WritesAttribute(attribute = "nitf.CMETAA.ADDITIONAL_TRES"),
  @WritesAttribute(attribute = "nitf.CMETAA.AF_TYPE1"),
  @WritesAttribute(attribute = "nitf.CMETAA.AF_TYPE2"),
  @WritesAttribute(attribute = "nitf.CMETAA.AF_TYPE3"),
  @WritesAttribute(attribute = "nitf.CMETAA.CA_CALPA"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_AMPT_X"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_AMPT_Y"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_AMPT_Z"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_APCEN_X"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_APCEN_Y"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_APCEN_Z"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_APER_CONF_XY"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_APER_CONF_Z"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_AP_CONF_XY"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_AP_CONF_Z"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_CAAC"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_CONE_CONFIDENCE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_CROSS"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_CROSS_CONFIDENCE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_EAST"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_FPNUV_X"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_FPNUV_Y"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_FPNUV_Z"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_GAAC"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_GAAC_CONFIDENCE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_GPSAC"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_GPSAC_CONFIDENCE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_GTP_X"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_GTP_Y"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_GTP_Z"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_IDPNUVX"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_IDPNUVY"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_IDPNUVZ"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_INCIDENT"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_LAYOVER"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_LD"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_LOS_CONFIDENCE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_MAP_TYPE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_MGRCORLL"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_MGRSCORLR"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_MGRSCORUL"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_MGRSCORUR"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_MGRS_CENT"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_MGRS_CONFIDENCE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_MODEL"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_NORTH"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_NORTH_CONFIDENCE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_OPM"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_PATCH_LATCEN"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_PATCH_LAT_CONFIDENCE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_PATCH_LGCORLR"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_PATCH_LGCORUL"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_PATCH_LGCORUR"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_PATCH_LNGCEN"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_PATCH_LNGCOLL"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_PATCH_LONG_CONFIDENCE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_PATCH_LTCORLL"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_PATCH_LTCORLR"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_PATCH_LTCORUL"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_PATCH_LTCORUR"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_RLOS"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SCECN_X"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SCECN_Y"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SCECN_Z"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SC_CONF_XY"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SC_CONF_Z"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SHADOW"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SLANT_CONFIDENCE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SLOPE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SNACC_X"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SNACC_Y"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SNACC_Z"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SNATT_PITCH"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SNATT_ROLL"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SNATT_YAW"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SNVEL_X"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SNVEL_Y"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SNVEL_Z"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SPARE_A"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SQUINT"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SRAC"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_SWWD"),
  @WritesAttribute(attribute = "nitf.CMETAA.CG_TILT"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_AVG_POWER"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_AZ_SLL"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_AZ_TAY_NBAR"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_DOMAIN"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_IC_1"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_IC_2"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_IC_BPP"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_LINLOG_TP"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_LIN_SCALE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_MAG_REMAP_TYPE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_PHASE_QUANT_BIT_DEPTH"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_PHASE_QUANT_FLAG"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_RNG_SLL"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_RNG_TAY_NBAR"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_SIGNAL_PLANE"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_SIZE_1"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_SIZE_2"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_WEIGHT"),
  @WritesAttribute(attribute = "nitf.CMETAA.CMPLX_WEIGHT_NORM"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_AFFTS"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_AZFFT_SAMP"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_AZFFT_TOT"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_AZRES"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_AZSR"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_AZSS"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_BEAM_COMP"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_DC_IS_COL"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_DC_IS_ROW"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_DC_SF_COL"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_DC_SF_ROW"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_GEODIST"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_IMG_COL_DC"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_IMG_ROW_DC"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_INCPH"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_KEYSTN"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_LINSFT"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_PATCH_1_COL"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_PATCH_1_ROW"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_PATCH_2_COL"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_PATCH_2_ROW"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_PATCH_3_COL"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_PATCH_3_ROW"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_PATCH_4_COL"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_PATCH_4_ROW"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_PROCESS"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_RANGE_DATA"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_RD"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_RFFTS"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_RFFT_SAMP"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_RFFT_TOT"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_RGFO"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_RGRES"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_RGWLK"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_RSR"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_RSS"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_SR_AMOUNT"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_SR_AMOUNT1"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_SR_AMOUNT2"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_SR_NAME1"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_SR_NAME2"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_SR_NAME3"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_SUBPATCH"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_SUBP_COL"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_SUBP_ROW"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_SUB_AZ"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_SUB_RG"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_TILE_1_COL"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_TILE_1_ROW"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_TILE_2_COL"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_TILE_2_ROW"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_TILE_3_COL"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_TILE_3_ROW"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_TILE_4_COL"),
  @WritesAttribute(attribute = "nitf.CMETAA.IF_TILE_4_ROW"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_AFCOMP"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_BAL"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_BAL_MAG"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_BAL_PHS"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_HCOMP"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_HCOMP_BASIS"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_HCOMP_COEF_1"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_HCOMP_COEF_2"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_HCOMP_COEF_3"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_ISO_1"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_RE"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_REFERENCE"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_REG"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_SPARE_A"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_SPARE_N"),
  @WritesAttribute(attribute = "nitf.CMETAA.POL_TR"),
  @WritesAttribute(attribute = "nitf.CMETAA.RD_CEN_FREQ"),
  @WritesAttribute(attribute = "nitf.CMETAA.RD_MODE"),
  @WritesAttribute(attribute = "nitf.CMETAA.RD_PATCH_NO"),
  @WritesAttribute(attribute = "nitf.CMETAA.RD_PRC_NO"),
  @WritesAttribute(attribute = "nitf.CMETAA.RELATED_TRES"),
  @WritesAttribute(attribute = "nitf.CMETAA.T_HHMMSSLOCAL"),
  @WritesAttribute(attribute = "nitf.CMETAA.T_HHMMSSUTC"),
  @WritesAttribute(attribute = "nitf.CMETAA.T_UTC_YYYYMMMDD"),
  @WritesAttribute(attribute = "nitf.CMETAA.VPH_COND"),
  @WritesAttribute(attribute = "nitf.CMETAA.WF_BW"),
  @WritesAttribute(attribute = "nitf.CMETAA.WF_CDP"),
  @WritesAttribute(attribute = "nitf.CMETAA.WF_CENFRQ"),
  @WritesAttribute(attribute = "nitf.CMETAA.WF_CHRPRT"),
  @WritesAttribute(attribute = "nitf.CMETAA.WF_ENDFR"),
  @WritesAttribute(attribute = "nitf.CMETAA.WF_NUMBER_OF_PULSES"),
  @WritesAttribute(attribute = "nitf.CMETAA.WF_PRF"),
  @WritesAttribute(attribute = "nitf.CMETAA.WF_PRI"),
  @WritesAttribute(attribute = "nitf.CMETAA.WF_SRTFR"),
  @WritesAttribute(attribute = "nitf.CMETAA.WF_WIDTH"),
  @WritesAttribute(attribute = "nitf.CSDIDA.DAY"),
  @WritesAttribute(attribute = "nitf.CSDIDA.MONTH"),
  @WritesAttribute(attribute = "nitf.CSDIDA.OPERATION"),
  @WritesAttribute(attribute = "nitf.CSDIDA.PASS"),
  @WritesAttribute(attribute = "nitf.CSDIDA.PROCESS_TIME"),
  @WritesAttribute(attribute = "nitf.CSDIDA.PRODUCT_ID"),
  @WritesAttribute(attribute = "nitf.CSDIDA.SENSOR_ID"),
  @WritesAttribute(attribute = "nitf.CSDIDA.SOFTWARE_VERSION_NUMBER"),
  @WritesAttribute(attribute = "nitf.CSDIDA.TIME"),
  @WritesAttribute(attribute = "nitf.CSDIDA.YEAR"),
  @WritesAttribute(attribute = "nitf.CSEXRA.ALONG_SCAN_GSD"),
  @WritesAttribute(attribute = "nitf.CSEXRA.ANGLE_TO_NORTH"),
  @WritesAttribute(attribute = "nitf.CSEXRA.AZ_OF_OBLIQUITY"),
  @WritesAttribute(attribute = "nitf.CSEXRA.A_S_VERT_GSD"),
  @WritesAttribute(attribute = "nitf.CSEXRA.CIRCL_ERR"),
  @WritesAttribute(attribute = "nitf.CSEXRA.CROSS_SCAN_GSD"),
  @WritesAttribute(attribute = "nitf.CSEXRA.C_S_VERT_GSD"),
  @WritesAttribute(attribute = "nitf.CSEXRA.DYNAMIC_RANGE"),
  @WritesAttribute(attribute = "nitf.CSEXRA.GEO_MEAN_GSD"),
  @WritesAttribute(attribute = "nitf.CSEXRA.GEO_MEAN_VERT_GSD"),
  @WritesAttribute(attribute = "nitf.CSEXRA.GRD_COVER"),
  @WritesAttribute(attribute = "nitf.CSEXRA.GSD_BETA_ANGLE"),
  @WritesAttribute(attribute = "nitf.CSEXRA.LINEAR_ERR"),
  @WritesAttribute(attribute = "nitf.CSEXRA.MAX_GSD"),
  @WritesAttribute(attribute = "nitf.CSEXRA.NUM_LINES"),
  @WritesAttribute(attribute = "nitf.CSEXRA.NUM_SAMPLES"),
  @WritesAttribute(attribute = "nitf.CSEXRA.OBLIQUITY_ANGLE"),
  @WritesAttribute(attribute = "nitf.CSEXRA.SENSOR"),
  @WritesAttribute(attribute = "nitf.CSEXRA.SNOW_DEPTH_CAT"),
  @WritesAttribute(attribute = "nitf.CSEXRA.SUN_AZIMUTH"),
  @WritesAttribute(attribute = "nitf.CSEXRA.SUN_ELEVATION"),
  @WritesAttribute(attribute = "nitf.CSEXRA.TIME_FIRST_LINE_IMAGE"),
  @WritesAttribute(attribute = "nitf.CSEXRA.TIME_IMAGE_DURATION"),
  @WritesAttribute(attribute = "nitf.EXPLTB.ANGLE_TO_NORTH"),
  @WritesAttribute(attribute = "nitf.EXPLTB.ANGLE_TO_NORTH_ACCY"),
  @WritesAttribute(attribute = "nitf.EXPLTB.GRAZE_ANG"),
  @WritesAttribute(attribute = "nitf.EXPLTB.GRAZE_ANG_ACCY"),
  @WritesAttribute(attribute = "nitf.EXPLTB.IPR"),
  @WritesAttribute(attribute = "nitf.EXPLTB.MODE"),
  @WritesAttribute(attribute = "nitf.EXPLTB.NSAMP"),
  @WritesAttribute(attribute = "nitf.EXPLTB.N_SEC"),
  @WritesAttribute(attribute = "nitf.EXPLTB.POLAR"),
  @WritesAttribute(attribute = "nitf.EXPLTB.PRIME_BE"),
  @WritesAttribute(attribute = "nitf.EXPLTB.PRIME_ID"),
  @WritesAttribute(attribute = "nitf.EXPLTB.SEQ_NUM"),
  @WritesAttribute(attribute = "nitf.EXPLTB.SLOPE_ANG"),
  @WritesAttribute(attribute = "nitf.EXPLTB.SQUINT_ANGLE"),
  @WritesAttribute(attribute = "nitf.EXPLTB.SQUINT_ANGLE_ACCY"),
  @WritesAttribute(attribute = "nitf.HISTOA.LUTID"),
  @WritesAttribute(attribute = "nitf.HISTOA.PC"),
  @WritesAttribute(attribute = "nitf.HISTOA.PE"),
  @WritesAttribute(attribute = "nitf.HISTOA.REMAP_FLAG"),
  @WritesAttribute(attribute = "nitf.HISTOA.SYSTYPE"),
  @WritesAttribute(attribute = "nitf.MTIRPB.ACFT_ALT"),
  @WritesAttribute(attribute = "nitf.MTIRPB.ACFT_ALT_UNIT"),
  @WritesAttribute(attribute = "nitf.MTIRPB.ACFT_HEADING"),
  @WritesAttribute(attribute = "nitf.MTIRPB.ACFT_LOC"),
  @WritesAttribute(attribute = "nitf.MTIRPB.COSGRZ"),
  @WritesAttribute(attribute = "nitf.MTIRPB.DATIME"),
  @WritesAttribute(attribute = "nitf.MTIRPB.MTI_DP"),
  @WritesAttribute(attribute = "nitf.MTIRPB.MTI_LR"),
  @WritesAttribute(attribute = "nitf.MTIRPB.PATCH_NO"),
  @WritesAttribute(attribute = "nitf.MTIRPB.SQUINT_ANGLE"),
  @WritesAttribute(attribute = "nitf.MTIRPB.TARGETS"),
  @WritesAttribute(attribute = "nitf.MTIRPB.TGT_AMPLITUDE"),
  @WritesAttribute(attribute = "nitf.MTIRPB.TGT_CAT"),
  @WritesAttribute(attribute = "nitf.MTIRPB.TGT_HEADING"),
  @WritesAttribute(attribute = "nitf.MTIRPB.TGT_LOC_ACCY"),
  @WritesAttribute(attribute = "nitf.MTIRPB.TGT_SPEED"),
  @WritesAttribute(attribute = "nitf.MTIRPB.TGT_VEL_R"),
  @WritesAttribute(attribute = "nitf.MTIRPB.WAMTI_BAR_NO"),
  @WritesAttribute(attribute = "nitf.MTIRPB.WAMTI_FRAME_NO"),
  @WritesAttribute(attribute = "nitf.PIAIMC.CAMSPECS"),
  @WritesAttribute(attribute = "nitf.PIAIMC.CLOUDCVR"),
  @WritesAttribute(attribute = "nitf.PIAIMC.COMGEN"),
  @WritesAttribute(attribute = "nitf.PIAIMC.ESD"),
  @WritesAttribute(attribute = "nitf.PIAIMC.GENERATION"),
  @WritesAttribute(attribute = "nitf.PIAIMC.IDATUM"),
  @WritesAttribute(attribute = "nitf.PIAIMC.IELLIP"),
  @WritesAttribute(attribute = "nitf.PIAIMC.IPROJ"),
  @WritesAttribute(attribute = "nitf.PIAIMC.MEANGSD"),
  @WritesAttribute(attribute = "nitf.PIAIMC.OTHERCOND"),
  @WritesAttribute(attribute = "nitf.PIAIMC.PIAMSNNUM"),
  @WritesAttribute(attribute = "nitf.PIAIMC.PREPROC"),
  @WritesAttribute(attribute = "nitf.PIAIMC.PROJID"),
  @WritesAttribute(attribute = "nitf.PIAIMC.SATTRACK_PATH"),
  @WritesAttribute(attribute = "nitf.PIAIMC.SATTRACK_ROW"),
  @WritesAttribute(attribute = "nitf.PIAIMC.SENSMODE"),
  @WritesAttribute(attribute = "nitf.PIAIMC.SENSNAME"),
  @WritesAttribute(attribute = "nitf.PIAIMC.SOURCE"),
  @WritesAttribute(attribute = "nitf.PIAIMC.SRP"),
  @WritesAttribute(attribute = "nitf.PIAIMC.SUBQUAL"),
  @WritesAttribute(attribute = "nitf.PIAPRD.ACCESSID"),
  @WritesAttribute(attribute = "nitf.PIAPRD.FMCONTROL"),
  @WritesAttribute(attribute = "nitf.PIAPRD.KEYWORD"),
  @WritesAttribute(attribute = "nitf.PIAPRD.KEYWORDREP"),
  @WritesAttribute(attribute = "nitf.PIAPRD.MAPID"),
  @WritesAttribute(attribute = "nitf.PIAPRD.PRODCODE"),
  @WritesAttribute(attribute = "nitf.PIAPRD.PRODCRTIME"),
  @WritesAttribute(attribute = "nitf.PIAPRD.PRODIDNO"),
  @WritesAttribute(attribute = "nitf.PIAPRD.PRODSNME"),
  @WritesAttribute(attribute = "nitf.PIAPRD.PRODUCERCD"),
  @WritesAttribute(attribute = "nitf.PIAPRD.PRODUCERSE"),
  @WritesAttribute(attribute = "nitf.PIAPRD.SUBDET"),
  @WritesAttribute(attribute = "nitf.PIATGB.DATUM"),
  @WritesAttribute(attribute = "nitf.PIATGB.PERCOVER"),
  @WritesAttribute(attribute = "nitf.PIATGB.PIACAT"),
  @WritesAttribute(attribute = "nitf.PIATGB.PIACTRY"),
  @WritesAttribute(attribute = "nitf.PIATGB.PIATGAID"),
  @WritesAttribute(attribute = "nitf.PIATGB.TGTGEO"),
  @WritesAttribute(attribute = "nitf.PIATGB.TGTLAT"),
  @WritesAttribute(attribute = "nitf.PIATGB.TGTLON"),
  @WritesAttribute(attribute = "nitf.PIATGB.TGTNAME"),
  @WritesAttribute(attribute = "nitf.PIATGB.TGTUTM"),
  @WritesAttribute(attribute = "nitf.STDIDC.ACQUISITION_DATE"),
  @WritesAttribute(attribute = "nitf.STDIDC.COUNTRY"),
  @WritesAttribute(attribute = "nitf.STDIDC.END_COLUMN"),
  @WritesAttribute(attribute = "nitf.STDIDC.END_ROW"),
  @WritesAttribute(attribute = "nitf.STDIDC.END_SEGMENT"),
  @WritesAttribute(attribute = "nitf.STDIDC.LOCATION"),
  @WritesAttribute(attribute = "nitf.STDIDC.MISSION"),
  @WritesAttribute(attribute = "nitf.STDIDC.OP_NUM"),
  @WritesAttribute(attribute = "nitf.STDIDC.PASS"),
  @WritesAttribute(attribute = "nitf.STDIDC.REPLAY_REGEN"),
  @WritesAttribute(attribute = "nitf.STDIDC.REPRO_NUM"),
  @WritesAttribute(attribute = "nitf.STDIDC.START_COLUMN"),
  @WritesAttribute(attribute = "nitf.STDIDC.START_ROW"),
  @WritesAttribute(attribute = "nitf.STDIDC.START_SEGMENT"),
  @WritesAttribute(attribute = "nitf.STDIDC.WAC"),
  @WritesAttribute(attribute = "nitf.file.CLEVEL"),
  @WritesAttribute(attribute = "nitf.file.FBKGC"),
  @WritesAttribute(attribute = "nitf.file.FDT"),
  @WritesAttribute(attribute = "nitf.file.FHDR"),
  @WritesAttribute(attribute = "nitf.file.FSCATP"),
  @WritesAttribute(attribute = "nitf.file.FSCAUT"),
  @WritesAttribute(attribute = "nitf.file.FSCLAS"),
  @WritesAttribute(attribute = "nitf.file.FSCLSY"),
  @WritesAttribute(attribute = "nitf.file.FSCLTX"),
  @WritesAttribute(attribute = "nitf.file.FSCODE"),
  @WritesAttribute(attribute = "nitf.file.FSCOP"),
  @WritesAttribute(attribute = "nitf.file.FSCPYS"),
  @WritesAttribute(attribute = "nitf.file.FSCRSN"),
  @WritesAttribute(attribute = "nitf.file.FSCTLH"),
  @WritesAttribute(attribute = "nitf.file.FSCTLN"),
  @WritesAttribute(attribute = "nitf.file.FSDCDT"),
  @WritesAttribute(attribute = "nitf.file.FSDCTP"),
  @WritesAttribute(attribute = "nitf.file.FSDCXM"),
  @WritesAttribute(attribute = "nitf.file.FSDG"),
  @WritesAttribute(attribute = "nitf.file.FSDGDT"),
  @WritesAttribute(attribute = "nitf.file.FSREL"),
  @WritesAttribute(attribute = "nitf.file.FSSRDT"),
  @WritesAttribute(attribute = "nitf.file.FTITLE"),
  @WritesAttribute(attribute = "nitf.file.FVER"),
  @WritesAttribute(attribute = "nitf.file.ONAME"),
  @WritesAttribute(attribute = "nitf.file.OPHONE"),
  @WritesAttribute(attribute = "nitf.file.OSTAID"),
  @WritesAttribute(attribute = "nitf.file.STYPE"),
  @WritesAttribute(attribute = "nitf.graphic.SALVL"),
  @WritesAttribute(attribute = "nitf.graphic.SCOLOR"),
  @WritesAttribute(attribute = "nitf.graphic.SDLVL"),
  @WritesAttribute(attribute = "nitf.graphic.SID"),
  @WritesAttribute(attribute = "nitf.graphic.SLOC"),
  @WritesAttribute(attribute = "nitf.graphic.SNAME"),
  @WritesAttribute(attribute = "nitf.graphic.SSCATP"),
  @WritesAttribute(attribute = "nitf.graphic.SSCAUT"),
  @WritesAttribute(attribute = "nitf.graphic.SSCLAS"),
  @WritesAttribute(attribute = "nitf.graphic.SSCLSY"),
  @WritesAttribute(attribute = "nitf.graphic.SSCLTX"),
  @WritesAttribute(attribute = "nitf.graphic.SSCODE"),
  @WritesAttribute(attribute = "nitf.graphic.SSCRSN"),
  @WritesAttribute(attribute = "nitf.graphic.SSCTLH"),
  @WritesAttribute(attribute = "nitf.graphic.SSCTLN"),
  @WritesAttribute(attribute = "nitf.graphic.SSDCDT"),
  @WritesAttribute(attribute = "nitf.graphic.SSDCTP"),
  @WritesAttribute(attribute = "nitf.graphic.SSDCXM"),
  @WritesAttribute(attribute = "nitf.graphic.SSDG"),
  @WritesAttribute(attribute = "nitf.graphic.SSDGDT"),
  @WritesAttribute(attribute = "nitf.graphic.SSREL"),
  @WritesAttribute(attribute = "nitf.graphic.SSSRDT"),
  @WritesAttribute(attribute = "nitf.graphic.SXSHDL"),
  @WritesAttribute(attribute = "nitf.graphic.file-part-type"),
  @WritesAttribute(attribute = "nitf.image.ABPP"),
  @WritesAttribute(attribute = "nitf.image.COUNTRY"),
  @WritesAttribute(attribute = "nitf.image.IALVL"),
  @WritesAttribute(attribute = "nitf.image.IC"),
  @WritesAttribute(attribute = "nitf.image.ICAT"),
  @WritesAttribute(attribute = "nitf.image.ICOM1"),
  @WritesAttribute(attribute = "nitf.image.ICOM2"),
  @WritesAttribute(attribute = "nitf.image.ICOM3"),
  @WritesAttribute(attribute = "nitf.image.ICOM4"),
  @WritesAttribute(attribute = "nitf.image.ICOM5"),
  @WritesAttribute(attribute = "nitf.image.ICOM6"),
  @WritesAttribute(attribute = "nitf.image.ICOM7"),
  @WritesAttribute(attribute = "nitf.image.ICOM8"),
  @WritesAttribute(attribute = "nitf.image.ICOM9"),
  @WritesAttribute(attribute = "nitf.image.ICORDS"),
  @WritesAttribute(attribute = "nitf.image.IDATIM"),
  @WritesAttribute(attribute = "nitf.image.IDLVL"),
  @WritesAttribute(attribute = "nitf.image.IID1"),
  @WritesAttribute(attribute = "nitf.image.IID2"),
  @WritesAttribute(attribute = "nitf.image.ILOC"),
  @WritesAttribute(attribute = "nitf.image.IMAG"),
  @WritesAttribute(attribute = "nitf.image.IMODE"),
  @WritesAttribute(attribute = "nitf.image.IREP"),
  @WritesAttribute(attribute = "nitf.image.ISCATP"),
  @WritesAttribute(attribute = "nitf.image.ISCAUT"),
  @WritesAttribute(attribute = "nitf.image.ISCLAS"),
  @WritesAttribute(attribute = "nitf.image.ISCLSY"),
  @WritesAttribute(attribute = "nitf.image.ISCLTX"),
  @WritesAttribute(attribute = "nitf.image.ISCODE"),
  @WritesAttribute(attribute = "nitf.image.ISCRSN"),
  @WritesAttribute(attribute = "nitf.image.ISCTLH"),
  @WritesAttribute(attribute = "nitf.image.ISCTLN"),
  @WritesAttribute(attribute = "nitf.image.ISDCDT"),
  @WritesAttribute(attribute = "nitf.image.ISDCTP"),
  @WritesAttribute(attribute = "nitf.image.ISDCXM"),
  @WritesAttribute(attribute = "nitf.image.ISDG"),
  @WritesAttribute(attribute = "nitf.image.ISDGDT"),
  @WritesAttribute(attribute = "nitf.image.ISORCE"),
  @WritesAttribute(attribute = "nitf.image.ISREL"),
  @WritesAttribute(attribute = "nitf.image.ISSRDT"),
  @WritesAttribute(attribute = "nitf.image.NBANDS"),
  @WritesAttribute(attribute = "nitf.image.NBPC"),
  @WritesAttribute(attribute = "nitf.image.NBPP"),
  @WritesAttribute(attribute = "nitf.image.NBPR"),
  @WritesAttribute(attribute = "nitf.image.NCOLS"),
  @WritesAttribute(attribute = "nitf.image.NICOM"),
  @WritesAttribute(attribute = "nitf.image.NPPBH"),
  @WritesAttribute(attribute = "nitf.image.NPPBV"),
  @WritesAttribute(attribute = "nitf.image.NROWS"),
  @WritesAttribute(attribute = "nitf.image.PJUST"),
  @WritesAttribute(attribute = "nitf.image.PVTYPE"),
  @WritesAttribute(attribute = "nitf.image.TGTID"),
  @WritesAttribute(attribute = "nitf.image.file-part-type"),
  @WritesAttribute(attribute = "nitf.label.LALVL"),
  @WritesAttribute(attribute = "nitf.label.LBC"),
  @WritesAttribute(attribute = "nitf.label.LCH"),
  @WritesAttribute(attribute = "nitf.label.LCW"),
  @WritesAttribute(attribute = "nitf.label.LDLVL"),
  @WritesAttribute(attribute = "nitf.label.LID"),
  @WritesAttribute(attribute = "nitf.label.LLOC"),
  @WritesAttribute(attribute = "nitf.label.LSCAUT"),
  @WritesAttribute(attribute = "nitf.label.LSCLAS"),
  @WritesAttribute(attribute = "nitf.label.LSCODE"),
  @WritesAttribute(attribute = "nitf.label.LSCTLH"),
  @WritesAttribute(attribute = "nitf.label.LSCTLN"),
  @WritesAttribute(attribute = "nitf.label.LSDEVT"),
  @WritesAttribute(attribute = "nitf.label.LSDWNG"),
  @WritesAttribute(attribute = "nitf.label.LSREL"),
  @WritesAttribute(attribute = "nitf.label.LTC"),
  @WritesAttribute(attribute = "nitf.label.LXSHDL"),
  @WritesAttribute(attribute = "nitf.label.file-part-type"),
  @WritesAttribute(attribute = "nitf.symbol.NBPP"),
  @WritesAttribute(attribute = "nitf.symbol.NLIPS"),
  @WritesAttribute(attribute = "nitf.symbol.NPIXPL"),
  @WritesAttribute(attribute = "nitf.symbol.NWDTH"),
  @WritesAttribute(attribute = "nitf.symbol.SALVL"),
  @WritesAttribute(attribute = "nitf.symbol.SCOLOR"),
  @WritesAttribute(attribute = "nitf.symbol.SDLVL"),
  @WritesAttribute(attribute = "nitf.symbol.SID"),
  @WritesAttribute(attribute = "nitf.symbol.SLOC"),
  @WritesAttribute(attribute = "nitf.symbol.SLOC2"),
  @WritesAttribute(attribute = "nitf.symbol.SNAME"),
  @WritesAttribute(attribute = "nitf.symbol.SNUM"),
  @WritesAttribute(attribute = "nitf.symbol.SROT"),
  @WritesAttribute(attribute = "nitf.symbol.SSCAUT"),
  @WritesAttribute(attribute = "nitf.symbol.SSCLAS"),
  @WritesAttribute(attribute = "nitf.symbol.SSCODE"),
  @WritesAttribute(attribute = "nitf.symbol.SSCTLH"),
  @WritesAttribute(attribute = "nitf.symbol.SSCTLN"),
  @WritesAttribute(attribute = "nitf.symbol.SSDEVT"),
  @WritesAttribute(attribute = "nitf.symbol.SSDWNG"),
  @WritesAttribute(attribute = "nitf.symbol.SSREL"),
  @WritesAttribute(attribute = "nitf.symbol.STYPE"),
  @WritesAttribute(attribute = "nitf.symbol.SXSHDL"),
  @WritesAttribute(attribute = "nitf.symbol.file-part-type"),
  @WritesAttribute(attribute = "nitf.text.TSCATP"),
  @WritesAttribute(attribute = "nitf.text.TSCAUT"),
  @WritesAttribute(attribute = "nitf.text.TSCLAS"),
  @WritesAttribute(attribute = "nitf.text.TSCLSY"),
  @WritesAttribute(attribute = "nitf.text.TSCLTX"),
  @WritesAttribute(attribute = "nitf.text.TSCODE"),
  @WritesAttribute(attribute = "nitf.text.TSCRSN"),
  @WritesAttribute(attribute = "nitf.text.TSCTLH"),
  @WritesAttribute(attribute = "nitf.text.TSCTLN"),
  @WritesAttribute(attribute = "nitf.text.TSDCDT"),
  @WritesAttribute(attribute = "nitf.text.TSDCTP"),
  @WritesAttribute(attribute = "nitf.text.TSDCXM"),
  @WritesAttribute(attribute = "nitf.text.TSDG"),
  @WritesAttribute(attribute = "nitf.text.TSDGDT"),
  @WritesAttribute(attribute = "nitf.text.TSREL"),
  @WritesAttribute(attribute = "nitf.text.TSSRDT"),
  @WritesAttribute(attribute = "nitf.text.TXSHDL"),
  @WritesAttribute(attribute = "nitf.text.TXTALVL"),
  @WritesAttribute(attribute = "nitf.text.TXTDT"),
  @WritesAttribute(attribute = "nitf.text.TXTFMT"),
  @WritesAttribute(attribute = "nitf.text.TXTITL"),
  @WritesAttribute(attribute = "nitf.text.file-part-type")
})
public class NitfProcessor extends AbstractProcessor {

  private static final String NITF_PREFIX = "nitf";

  private static final ExtractMetadata EXTRACT_METADATA = new ExtractMetadata();

  // TODO since we don't really know what our nifi architecture will look like, I don't know if we
  // need a failure relationship.
  /* visible for testing */
  static final Relationship REL_SUCCESS =
      new Relationship.Builder()
          .name("success")
          .description("Files that are successfully extracted will be transferred to success")
          .build();

  private Set<Relationship> relationships;

  @Override
  protected void init(final ProcessorInitializationContext context) {
    final Set<Relationship> relationships = new HashSet<>();
    relationships.add(REL_SUCCESS);
    this.relationships = Collections.unmodifiableSet(relationships);
  }

  @Override
  public Set<Relationship> getRelationships() {
    return this.relationships;
  }

  @Override
  public final List<PropertyDescriptor> getSupportedPropertyDescriptors() {
    return Collections.emptyList();
  }

  @Override
  public void onTrigger(final ProcessContext context, final ProcessSession session)
      throws ProcessException {
    FlowFile flowFile = session.get();
    if (flowFile == null) {
      return;
    }

    Map<String, String> metadata = new HashMap<>();

    session.read(flowFile, inputStream -> EXTRACT_METADATA.extract(inputStream, metadata));

    metadata.forEach(
        (key, value) -> session.putAttribute(flowFile, NITF_PREFIX + "." + key, value));

    session.transfer(flowFile, REL_SUCCESS);
  }
}
