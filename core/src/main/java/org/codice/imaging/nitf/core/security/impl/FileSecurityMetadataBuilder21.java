/*
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 */
package org.codice.imaging.nitf.core.security.impl;

import java.util.function.Supplier;
import org.codice.imaging.nitf.core.security.FileSecurityMetadata;
import org.codice.imaging.nitf.core.common.FileType;

/**
 * Builder for FileSecurityMetadata for NITF 2.1 and NSIF 1.0 headers.
 *
 * This class implements a builder pattern, to produce a FileSecurityMetadata
 * object (which is immutable).
 *
 * A simple example of its use is:
 * <pre>{@code
 *      FileSecurityMetadataBuilder21 builder = FileSecurityMetadataBuilder21.newInstance(FileType.NITF_TWO_ONE);
 *      builder.securityClassification(SecurityClassification.UNCLASSIFIED);
 *      FileSecurityMetadata securityMetadata = builder.get();
 * }</pre>
 *
 * The API supports method chaining for a more fluent style, which is useful for
 * more involved metadata requirements:
 * <pre>{@code
 *      FileSecurityMetadataBuilder21 builder = FileSecurityMetadataBuilder21.newInstance(FileType.NITF_TWO_ONE);
 *      builder.securityClassification(SecurityClassification.RESTRICTED)
 *              .fileCopyNumber("00001")
 *              .securityClassificationSystem("AS")
 *              .downgrade("F")
 *              .codewords("AB CD EF")
 *              .releaseInstructions("Only to friends.")
 *              .controlAndHandling("GH")
 *              .downgradeDate("20170812")
 *              .declassificationType("GE")
 *              .declassificationExemption("X1")
 *              .securityControlNumber("Bogus2")
 *              .declassificationDate("20191008")
 *              .classificationText("Classification text3")
 *              .classificationAuthorityType("O")
 *              .fileNumberOfCopies("00002")
 *              .securitySourceDate("20081230")
 *              .classificationReason("C")
 *              .classificationAuthority("Some Person");
 *      FileSecurityMetadata securityMetadata = builder.get();
 * }</pre>
 */
public final class FileSecurityMetadataBuilder21
        extends FileSecurityMetadataBuilder<FileSecurityMetadataBuilder21, SecurityMetadataBuilder21>
        implements Supplier<FileSecurityMetadata> {

    private FileSecurityMetadataBuilder21() {
    }

    /**
     * Constructor method.
     *
     * @param fileType the type of file (NITF 2.1 or NSIF 1.0)
     * @return new instance of this FileSecurityMetadataBuilder21
     */
    public static FileSecurityMetadataBuilder21 newInstance(final FileType fileType) {
        FileSecurityMetadataBuilder21 builder = new FileSecurityMetadataBuilder21();
        builder.instance = builder;
        builder.builderInstance = SecurityMetadataBuilder21.newInstance(fileType);
        return builder;
    }

    /**
     * Copy constructor method.
     *
     * @param securityMetadata base security metadata.
     * @return new instance of this FileSecurityMetadataBuilder21
     */
    public static FileSecurityMetadataBuilder21 newInstance(final FileSecurityMetadata securityMetadata) {
        FileSecurityMetadataBuilder21 builder = new FileSecurityMetadataBuilder21();
        builder.instance = builder;
        builder.builderInstance = SecurityMetadataBuilder21.newInstance(securityMetadata);
        builder.fileCopyNumber(securityMetadata.getFileCopyNumber());
        builder.fileNumberOfCopies(securityMetadata.getFileNumberOfCopies());
        return builder;
    }

    /**
     * Set the security classification system.
     * <p>
     * This field is only valid for NITF 2.1 / NSIF 1.0 files.
     * <p>
     * "This field shall contain valid values indicating the national or
     * multinational security system used to classify the file. Country Codes
     * per FIPS PUB 10-4 shall be used to indicate national security systems.
     * The designator "XN" is for classified data generated by a component using
     * NATO security system marking guidance. This code is outside the FIPS 10-4
     * document listing, and was selected to not duplicate that document's
     * existing codes."
     * <p>
     * So system means "which country specified it". This field can be empty
     * indicating no security classification system applied.
     * <p>
     * This field must be set if security-related details (e.g. codewords,
     * control and handling instructions, release instructions, declassification
     * instructions, declassification authorities, declassification dates or
     * declassification exemptions) are set.
     *
     * @param classificationSystem the security classification system (2
     * character country code)
     * @return this builder, to support method chaining
     */
    public FileSecurityMetadataBuilder21 securityClassificationSystem(final String classificationSystem) {
        builderInstance.securityClassificationSystem(classificationSystem);
        return this;
    }

    /**
     * Set the classification reason.
     * <p>
     * "This field shall contain values indicating the reason for classifying
     * the file. Valid values are A to G. These correspond to the reasons for
     * original classification per E.O. 12958, Section 1.5.(a) to (g)."
     * <p>
     * An empty string indicates that no file classification reason applies.
     * <p>
     * This field is only valid for NITF 2.1 / NSIF 1.0 files.
     *
     * @param reasonCode the classification reason (1 character), or an empty
     * string.
     * @return this builder, to support method chaining
     */
    public FileSecurityMetadataBuilder21 classificationReason(final String reasonCode) {
        builderInstance.classificationReason(reasonCode);
        return this;
    }

    /**
     * Set the security source date.
     * <p>
     * "This field shall indicate the date of the source used to derive the
     * classification of the file. In the case of multiple sources, the date of
     * the most recent source shall be used."
     * <p>
     * An empty string indicates that a security source date does not apply.
     * <p>
     * This field is only valid for NITF 2.1 / NSIF 1.0 files.
     *
     * @param securitySourceDate the security source date (format CCYYMMDD), or
     * an empty string.
     * @return this builder, to support method chaining
     */
    public FileSecurityMetadataBuilder21 securitySourceDate(final String securitySourceDate) {
        builderInstance.securitySourceDate(securitySourceDate);
        return this;
    }

    /**
     * Set the security declassification type.
     * <p>
     * This field is only valid for NITF 2.1 / NSIF 1.0 files.
     * <p>
     * "This field shall contain a valid indicator of the type of security
     * declassification or downgrading instructions which apply to the file.
     * Valid values are DD (=declassify on a specific date), DE (=declassify
     * upon occurrence of an event), GD (=downgrade to a specified level on a
     * specific date), GE (=downgrade to a specified level upon occurrence of an
     * event), O (=OADR), and X (= exempt from automatic declassification)."
     * <p>
     * An empty string indicates that no declassification type applies.
     *
     * @param declassificationType the declassification type (2 characters
     * maximum), or an empty string.
     * @return this builder, to support method chaining
     */
    public FileSecurityMetadataBuilder21 declassificationType(final String declassificationType) {
        builderInstance.declassificationType(declassificationType);
        return this;
    }

    /**
     * Set the declassification date.
     * <p>
     * This field is only valid for NITF 2.1 / NSIF 1.0 files.
     * <p>
     * "This field shall indicate the date on which a file is to be declassified
     * if the value in Declassification Type is DD."
     * <p>
     * An empty string means that no declassification date applies.
     *
     * @param declassificationDate the declassification date (format CCYYMMDD),
     * or an empty string.
     * @return this builder, to support method chaining
     */
    public FileSecurityMetadataBuilder21 declassificationDate(final String declassificationDate) {
        builderInstance.declassificationDate(declassificationDate);
        return this;
    }

    /**
     * Set the declassification exemption.
     * <p>
     * This field is only valid for NITF 2.1 / NSIF 1.0 files.
     * <p>
     * "This field shall indicate the reason the file is exempt from automatic
     * declassification if the value in Declassification Type is X. Valid values
     * are X1 to X8 and X251 to X259. X1 to X8 correspond to the
     * declassification exemptions found in DOD 5200.1-R, paragraphs 4-202b(1)
     * to (8) for material exempt from the 10-year rule. X251 to X259 correspond
     * to the declassification exemptions found in DOD 5200.1-R, paragraphs
     * 4-301a(1) to (9) for permanently valuable material exempt from the
     * 25-year declassification system."
     * <p>
     * An empty string means that no declassification exemption applies.
     *
     * @param declassificationExemption the declassification exemption (four
     * characters maximum), or an empty string.
     * @return this builder, to support method chaining
     */
    public FileSecurityMetadataBuilder21 declassificationExemption(final String declassificationExemption) {
        builderInstance.declassificationExemption(declassificationExemption);
        return this;
    }

    /**
     * Set the security downgrade.
     * <p>
     * This field is only valid for NITF 2.1 / NSIF 1.0 files.
     * <p>
     * "This field shall indicate the classification level to which a file is to
     * be downgraded if the values in Declassification Type are GD or GE. Valid
     * values are S (=Secret), C (=Confidential), R (= Restricted)."
     * <p>
     * An empty string indicates that security downgrading does not apply.
     *
     * @param downgrade the downgrade classification level (1 character), or an
     * empty string.
     * @return this builder, to support method chaining
     */
    public FileSecurityMetadataBuilder21 downgrade(final String downgrade) {
        builderInstance.downgrade(downgrade);
        return this;
    }

    /**
     * Set the downgrade date.
     * <p>
     * This field is only valid for NITF 2.1 / NSIF 1.0 files.
     * <p>
     * "This field shall indicate the date on which a file is to be downgraded
     * if the value in Declassification Type is GD."
     * <p>
     * An empty string indicates that a security downgrading date does not
     * apply.
     *
     * @param downgradeDate the downgrade date (format CCYYMMDD), or an empty
     * string if downgrading does not apply.
     * @return this builder, to support method chaining
     */
    public FileSecurityMetadataBuilder21 downgradeDate(final String downgradeDate) {
        builderInstance.downgradeDate(downgradeDate);
        return this;
    }

    /**
     * Set the classification text.
     * <p>
     * This field is only valid for NITF 2.1 / NSIF 1.0 files.
     * <p>
     * "This field shall be used to provide additional information about file
     * classification to include identification of a declassification or
     * downgrading event if the values in Declassification Type are DE or GE. It
     * may also be used to identify multiple classification sources and/or any
     * other special handling rules. Values are user defined free text."
     * <p>
     * An empty string indicates that additional information about file
     * classification does not apply.
     *
     * @param classificationText the classification text (43 characters
     * maximum), or an empty string.
     * @return this builder, to support method chaining
     */
    public FileSecurityMetadataBuilder21 classificationText(final String classificationText) {
        builderInstance.classificationText(classificationText);
        return this;
    }

    /**
     * Set the classification authority type.
     * <p>
     * This field is only valid for NITF 2.1 / NSIF 1.0 files.
     * <p>
     * "This field shall indicate the type of authority used to classify the
     * file. Valid values are O (= original classification authority), D (=
     * derivative from a single source), and M (= derivative from multiple
     * sources)."
     * <p>
     * An empty string indicates that classification authority type does not
     * apply.
     *
     * @param classificationAuthorityType classification authority type (1
     * character), or an empty string.
     * @return this builder, to support method chaining
     */
    public FileSecurityMetadataBuilder21 classificationAuthorityType(final String classificationAuthorityType) {
        builderInstance.classificationAuthorityType(classificationAuthorityType);
        return this;
    }
}
